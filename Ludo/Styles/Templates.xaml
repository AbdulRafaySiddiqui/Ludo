<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Ludo">
    
    <!--Value Converter-->
    <local:MultipleParameterConverter x:Key="MultipleParameterConverter"/>

    <!--Window Control Button-->
    <Style TargetType="{x:Type Button}" x:Key="WindowControlButton">
        <Setter  Property="WindowChrome.IsHitTestVisibleInChrome" Value="True"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Padding" Value="8"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="LayoutTransform">
            <Setter.Value>
                <ScaleTransform ScaleX="1.2"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}">
                        <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center" Foreground="{TemplateBinding Foreground}" Text="{TemplateBinding Content}" />
                    </Border>
                </ControlTemplate>

            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="LightGray"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--Window CLose Button-->
    <Style x:Key="WindowCloseButton" TargetType="{x:Type Button}" BasedOn="{StaticResource WindowControlButton}">
        <Setter Property="Padding" Value="8 0 15 0"/>
        <Style.Triggers>
            <EventTrigger RoutedEvent="MouseEnter">
                <BeginStoryboard>
                    <Storyboard>
                        <ColorAnimation To="Orange" 
                                        Duration="0:0:0.3"
                                        Storyboard.TargetProperty="(Button.Background).(SolidColorBrush.Color)"/>
                        <ColorAnimation To="White" 
                                        Duration="0:0:0.3"
                                        Storyboard.TargetProperty="(Button.Foreground).(SolidColorBrush.Color)"/>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="MouseLeave">
                <BeginStoryboard>
                    <Storyboard>
                        <ColorAnimation From="Orange" 
                                        Duration="0:0:0.3"
                                        Storyboard.TargetProperty="(Button.Background).(SolidColorBrush.Color)"/>
                        <ColorAnimation From="White" 
                                        Duration="0:0:0.3"
                                        Storyboard.TargetProperty="(Button.Foreground).(SolidColorBrush.Color)"/>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </Style.Triggers>
    </Style>

    <!--Main Window Style-->
    <Style TargetType="{x:Type local:MainWindow}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <!--Main Window Outline -->
                    <Grid SnapsToDevicePixels="True">

                        <!-- Opacity mask for corners on grid-->
                        <Border x:Name="Container"
                                Background="White"
                                CornerRadius="{Binding RelativeSource={RelativeSource TemplatedParent},Path=DataContext.WindowCornerRadius}"
                                SnapsToDevicePixels="True"/>

                        <!--Grid Window Content-->
                        <Grid>

                            <!--Blur overlay-->
                            <Grid.Effect>
                                <BlurEffect KernelType="Gaussian" Radius="0"/>
                            </Grid.Effect>

                            <!--Triggers for blur overlay-->
                            <Grid.Style>
                                <Style TargetType="{x:Type Grid}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource TemplatedParent},Path=DataContext.IsBlurOverlayVisible}" Value="True">
                                            <DataTrigger.EnterActions>
                                                <BeginStoryboard>
                                                    <Storyboard>
                                                        <DoubleAnimation To="4" 
                                                                         Duration="0:0:0.2"
                                                                         Storyboard.TargetProperty="(UIElement.Effect).(BlurEffect.Radius)"/>
                                                    </Storyboard>
                                                </BeginStoryboard>
                                            </DataTrigger.EnterActions>
                                            <DataTrigger.ExitActions>
                                                <BeginStoryboard>
                                                    <Storyboard>
                                                        <DoubleAnimation To="0" 
                                                                         Duration="0:0:0.2"                                 
                                                                         Storyboard.TargetProperty="(UIElement.Effect).(BlurEffect.Radius)"/>
                                                    </Storyboard>
                                                </BeginStoryboard>
                                            </DataTrigger.ExitActions>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Grid.Style>
                            
                            <!-- Corner Clipping -->
                            <Grid.OpacityMask>
                                <VisualBrush Visual="{Binding ElementName=Container}"/>
                            </Grid.OpacityMask>

                            <!--Dim Overlay-->
                            <Grid Background="Black" 
                                  IsHitTestVisible="False"
                                  Opacity="0" 
                                  Panel.ZIndex="1"
                                  >
                                <Grid.Style>
                                    <Style TargetType="{x:Type Grid}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource TemplatedParent},Path=DataContext.IsBlurOverlayVisible}" 
                                                         Value="True">
                                                <DataTrigger.EnterActions>
                                                    <BeginStoryboard>
                                                        <Storyboard>
                                                            <DoubleAnimation To="0.5" 
                                                                             Duration="0:0:0.2"
                                                                             Storyboard.TargetProperty="Opacity"/>

                                                        </Storyboard>
                                                    </BeginStoryboard>
                                                </DataTrigger.EnterActions>
                                                <DataTrigger.ExitActions>
                                                    <BeginStoryboard>
                                                        <Storyboard>
                                                            <DoubleAnimation To="0" 
                                                                             Duration="0:0:0.2"
                                                                             Storyboard.TargetProperty="Opacity"/>
                                                        </Storyboard>
                                                    </BeginStoryboard>
                                                </DataTrigger.ExitActions>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Grid.Style>

                            </Grid>
                            
                            <!--Main Window Content-->
                            <Grid>

                                <Grid.RowDefinitions>

                                    <!--Title Bar-->
                                    <RowDefinition Height="{Binding RelativeSource={RelativeSource TemplatedParent},Path=DataContext.TitleHeightGridLength}"/>
                                    <!--Drop Shadow-->
                                    <RowDefinition Height="Auto"/>
                                    <!--Window Content-->
                                    <RowDefinition Height="*"/>

                                </Grid.RowDefinitions>

                                <!--Title Bar Grid-->
                                <Grid Grid.Row="0" Panel.ZIndex="1">
                                    <Grid.ColumnDefinitions>

                                        <!-- Title-->
                                        <ColumnDefinition Width="*"/>
                                        <!-- Window Buttons-->
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>

                                    <!--Title-->
                                    <Viewbox Grid.Column="0" Grid.ColumnSpan="3" Margin="0">
                                        <TextBlock  Margin="0 8" Text="{Binding RelativeSource={RelativeSource TemplatedParent},Path=Title}"/>
                                    </Viewbox>

                                    <!--Window Buttons-->
                                    <StackPanel Grid.Column="1" Orientation="Horizontal">
                                        <Button Style="{StaticResource WindowControlButton}" Foreground="Gray" Content="_" Command="{Binding RelativeSource={RelativeSource TemplatedParent},Path=DataContext.MinimizedCommand}"/>
                                        <Button Style="{StaticResource WindowControlButton}" Foreground="Gray" Content="[ ]" Command="{Binding RelativeSource={RelativeSource TemplatedParent},Path=DataContext.MaximizedCommand}"/>
                                        <Button Style="{StaticResource WindowCloseButton}" Foreground="Gray" Content="X" Command="{Binding RelativeSource={RelativeSource TemplatedParent},Path=DataContext.CloseCommand}"/>
                                    </StackPanel>
                                </Grid>

                                <!--Drop Shadow Grid-->
                                <Border Grid.Row="1"  Height="5" BorderThickness="0 0.6 0 0">
                                    <!--Under line-->
                                    <Border.BorderBrush>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="1 , 0">
                                            <GradientStop Color="White" Offset="0.0"/>
                                            <GradientStop Color="LightGray" Offset="0.5"/>
                                            <GradientStop Color="White" Offset="1.0"/>
                                        </LinearGradientBrush>
                                    </Border.BorderBrush>

                                    <!--Drop Shadow-->
                                    <Border.Background>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0 , 1">
                                            <GradientStop Color="LightGray" Offset="0.0"/>
                                            <GradientStop Color="White" Offset="1.0"/>
                                        </LinearGradientBrush>
                                    </Border.Background>
                                </Border>

                                <!--Page Content-->
                                <Border Grid.Row="2" Padding="{Binding RelativeSource={RelativeSource TemplatedParent},Path=DataContext.InnerContentPadding}">
                                    <ContentPresenter Content="{TemplateBinding Content}"/>
                                </Border>
                            </Grid>

                        </Grid>

                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="WindowChrome.WindowChrome">
            <Setter.Value>
                <WindowChrome ResizeBorderThickness="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}},Path=DataContext.ResizeBorderThickness}"
                              CaptionHeight="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}},Path=DataContext.TitleHeight}"
                              GlassFrameThickness="0"
                              />
            </Setter.Value>
        </Setter>
    </Style>

    <!--FontAwesome Icons-->
    <FontFamily x:Key="FontAwesomeSolid">pack://application;,,,/FontAwesomeSolid.otf#Font Awesome 5 Free Solid</FontFamily>

    <!-- Icon Grow button -->
    <Style x:Key="IconGrowButton" TargetType="{x:Type Button}">

        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FontSize" Value="25" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Margin" Value="0" />

        <Setter Property="Width" Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" 
                            SnapsToDevicePixels="True">

                        <!-- Add a render scale transform -->
                        <Border.RenderTransform>
                            <ScaleTransform />
                        </Border.RenderTransform>
                        <Border.RenderTransformOrigin>
                            <Point X="0.5" Y="0.5" />
                        </Border.RenderTransformOrigin>

                        <Grid>
                            <Label Content="{TemplateBinding Content}" 
                                       Focusable="False" 
                                       Foreground="{TemplateBinding Foreground}"
                                       FontFamily="{TemplateBinding FontFamily}"
                                       FontSize="{TemplateBinding FontSize}"
                                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                       Margin="{TemplateBinding Padding}" 
                                       SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="MouseEnter">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation To="1.2" Duration="0:0:0.15" Storyboard.TargetName="border" Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleX)" />
                                    <DoubleAnimation To="1.2" Duration="0:0:0.15" Storyboard.TargetName="border" Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleY)" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseLeave">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation To="1" Duration="0:0:0.15" Storyboard.TargetName="border" Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleX)" />
                                    <DoubleAnimation To="1" Duration="0:0:0.15" Storyboard.TargetName="border" Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleY)" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Red piece style-->
    <Style x:Key="RedPieceButton" TargetType="{x:Type Button}">

        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FontSize" Value="15" />
        <Setter Property="Margin" Value="2" />
        <Setter Property="Width" Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid>
                        <Viewbox>
                            <Border x:Name="border"
                                    BorderBrush="White"
                                    BorderThickness="2"
                                    SnapsToDevicePixels="True"
                                    CornerRadius="{Binding Width,RelativeSource={RelativeSource AncestorType={x:Type Button}}}">
                                <Border.Background>
                                    <RadialGradientBrush 
                                                         GradientOrigin="0.5,0.5" 
                                                         Center="0.5,0.5" RadiusX="0.5" RadiusY="0.5">
                                        <RadialGradientBrush.GradientStops>
                                            <GradientStop Color="Yellow" Offset="0" />
                                            <GradientStop Color="Red" Offset="1" />
                                        </RadialGradientBrush.GradientStops>
                                    </RadialGradientBrush>
                                </Border.Background>

                                <!-- Add a render scale transform -->
                                <Border.RenderTransform>
                                    <ScaleTransform />
                                </Border.RenderTransform>
                                <Border.RenderTransformOrigin>
                                    <Point X="0.5" Y="0.5" />
                                </Border.RenderTransformOrigin>

                                <Label FontFamily="{StaticResource FontAwesomeSolid}"
                                       Content="&#xf005;"
                                       Foreground="White"
                                       HorizontalAlignment="Center"
                                       VerticalAlignment="Center"
                                       FontSize="20"/>

                            </Border>
                        </Viewbox>
                        <Popup x:Name="popup"
                                   Placement="Top"
                                   HorizontalOffset="10"
                                   VerticalOffset="20"
                                   AllowsTransparency="True"
                                   >
                            <Grid>

                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>

                                <!-- Dice Value Container -->
                                <Border CornerRadius="10"
                                            Padding="12"
                                            Margin="5 0 0 0"
                                            Background="BurlyWood"
                                            >
                                    <ItemsControl ItemsSource="{Binding DataContext.Dice,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Page}}}">
                                        <ItemsControl.ItemsPanel>
                                            <ItemsPanelTemplate>
                                                <WrapPanel/>
                                            </ItemsPanelTemplate>
                                        </ItemsControl.ItemsPanel>
                                        <ItemsControl.ItemTemplate>
                                            <DataTemplate>
                                                <Button x:Name="DiceValueButton"
                                                        Style="{StaticResource IconGrowButton}"
                                                        Content="{Binding}"
                                                        Command="{Binding DataContext.PieceCommand,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Page}}}">
                                                    <Button.CommandParameter>
                                                        <MultiBinding Converter="{StaticResource MultipleParameterConverter}">
                                                            <Binding ElementName="DiceValueButton"/>
                                                            <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type Button}}"/>
                                                        </MultiBinding>
                                                    </Button.CommandParameter>
                                                </Button>
                                            </DataTemplate>
                                        </ItemsControl.ItemTemplate>
                                    </ItemsControl>

                                </Border>

                                <!-- anchor -->
                                <Path Grid.Row="1" 
                                          Stroke="Black"
                                          Panel.ZIndex="1"
                                          Margin="20 -1 15 0"
                                          Data="M 0,0 L 20,20 L 40,0 L 0,0" 
                                          StrokeThickness="0"
                                          HorizontalAlignment="Center"
                                          Fill="BurlyWood"
                                          >

                                    <Path.Effect>
                                        <DropShadowEffect BlurRadius="3" Opacity="0.5" ShadowDepth="2" Color="LightGray" />
                                    </Path.Effect>

                                </Path>

                            </Grid>

                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="MouseEnter">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation To="1.2" Duration="0:0:0.15" Storyboard.TargetName="border" Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleX)" />
                                    <DoubleAnimation To="1.2" Duration="0:0:0.15" Storyboard.TargetName="border" Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleY)" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseLeave">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation To="1" Duration="0:0:0.15" Storyboard.TargetName="border" Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleX)" />
                                    <DoubleAnimation To="1" Duration="0:0:0.15" Storyboard.TargetName="border" Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleY)" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="popup" Property="IsOpen" Value="True"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="False">
                            <Setter TargetName="popup" Property="IsOpen" Value="False"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="border" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Blue piece style-->
    <Style x:Key="BluePieceButton" TargetType="{x:Type Button}">

        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FontSize" Value="15" />
        <Setter Property="Margin" Value="2" />
        <Setter Property="Width" Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid>
                        <Border x:Name="border"
                                    BorderBrush="White"
                                    BorderThickness="2"
                                    SnapsToDevicePixels="True"
                                    CornerRadius="{Binding Width,RelativeSource={RelativeSource AncestorType={x:Type Button}}}">
                            <Border.Background>
                                <RadialGradientBrush 
                                                         GradientOrigin="0.5,0.5" 
                                                         Center="0.5,0.5" RadiusX="0.5" RadiusY="0.5">
                                    <RadialGradientBrush.GradientStops>
                                        <GradientStop Color="LightBlue" Offset="0" />
                                        <GradientStop Color="Blue" Offset="1" />
                                    </RadialGradientBrush.GradientStops>
                                </RadialGradientBrush>
                            </Border.Background>

                            <!-- Add a render scale transform -->
                            <Border.RenderTransform>
                                <ScaleTransform />
                            </Border.RenderTransform>
                            <Border.RenderTransformOrigin>
                                <Point X="0.5" Y="0.5" />
                            </Border.RenderTransformOrigin>

                            <Label FontFamily="{StaticResource FontAwesomeSolid}"
                                       Content="&#xf005;"
                                       Foreground="White"
                                       HorizontalAlignment="Center"
                                       VerticalAlignment="Center"
                                       FontSize="20"/>

                        </Border>
                        <Popup x:Name="popup"
                                   Placement="Top"
                                   HorizontalOffset="10"
                                   VerticalOffset="20"
                                   AllowsTransparency="True"
                                   >
                            <Grid>

                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>

                                <!-- Dice Value Container -->
                                <Border CornerRadius="10"
                                            Padding="12"
                                            Margin="5 0 0 0"
                                            Background="BurlyWood"
                                            >
                                    <ItemsControl ItemsSource="{Binding DataContext.Dice,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Page}}}">
                                        <ItemsControl.ItemsPanel>
                                            <ItemsPanelTemplate>
                                                <WrapPanel/>
                                            </ItemsPanelTemplate>
                                        </ItemsControl.ItemsPanel>
                                        <ItemsControl.ItemTemplate>
                                            <DataTemplate>
                                                <Button x:Name="DiceValueButton"
                                                        Style="{StaticResource IconGrowButton}"
                                                        Content="{Binding}"
                                                        Command="{Binding DataContext.PieceCommand,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Page}}}">
                                                    <Button.CommandParameter>
                                                        <MultiBinding Converter="{StaticResource MultipleParameterConverter}">
                                                            <Binding ElementName="DiceValueButton"/>
                                                            <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type Button}}"/>
                                                        </MultiBinding>
                                                    </Button.CommandParameter>
                                                </Button>
                                            </DataTemplate>
                                        </ItemsControl.ItemTemplate>
                                    </ItemsControl>

                                </Border>

                                <!-- anchor -->
                                <Path Grid.Row="1" 
                                          Stroke="Black"
                                          Panel.ZIndex="1"
                                          Margin="20 -1 15 0"
                                          Data="M 0,0 L 20,20 L 40,0 L 0,0" 
                                          StrokeThickness="0"
                                          HorizontalAlignment="Center"
                                          Fill="BurlyWood"
                                          >

                                    <Path.Effect>
                                        <DropShadowEffect BlurRadius="3" Opacity="0.5" ShadowDepth="2" Color="LightGray" />
                                    </Path.Effect>

                                </Path>

                            </Grid>

                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="MouseEnter">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation To="1.2" Duration="0:0:0.15" Storyboard.TargetName="border" Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleX)" />
                                    <DoubleAnimation To="1.2" Duration="0:0:0.15" Storyboard.TargetName="border" Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleY)" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseLeave">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation To="1" Duration="0:0:0.15" Storyboard.TargetName="border" Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleX)" />
                                    <DoubleAnimation To="1" Duration="0:0:0.15" Storyboard.TargetName="border" Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleY)" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="popup" Property="IsOpen" Value="True"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="False">
                            <Setter TargetName="popup" Property="IsOpen" Value="False"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="border" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Green piece style-->
    <Style x:Key="GreenPieceButton" TargetType="{x:Type Button}">

        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FontSize" Value="15" />
        <Setter Property="Margin" Value="2" />
        <Setter Property="Width" Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid>
                        <Border x:Name="border"
                                    BorderBrush="White"
                                    BorderThickness="2"
                                    SnapsToDevicePixels="True"
                                    CornerRadius="{Binding Width,RelativeSource={RelativeSource AncestorType={x:Type Button}}}">
                            <Border.Background>
                                <RadialGradientBrush 
                                                         GradientOrigin="0.5,0.5" 
                                                         Center="0.5,0.5" RadiusX="0.5" RadiusY="0.5">
                                    <RadialGradientBrush.GradientStops>
                                        <GradientStop Color="LightGreen" Offset="0" />
                                        <GradientStop Color="Green" Offset="1" />
                                    </RadialGradientBrush.GradientStops>
                                </RadialGradientBrush>
                            </Border.Background>

                            <!-- Add a render scale transform -->
                            <Border.RenderTransform>
                                <ScaleTransform />
                            </Border.RenderTransform>
                            <Border.RenderTransformOrigin>
                                <Point X="0.5" Y="0.5" />
                            </Border.RenderTransformOrigin>

                            <Label FontFamily="{StaticResource FontAwesomeSolid}"
                                       Content="&#xf005;"
                                       Foreground="White"
                                       HorizontalAlignment="Center"
                                       VerticalAlignment="Center"
                                       FontSize="20"/>

                        </Border>
                        <Popup x:Name="popup"
                                   Placement="Top"
                                   HorizontalOffset="10"
                                   VerticalOffset="20"
                                   AllowsTransparency="True"
                                   >
                            <Grid>

                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>

                                <!-- Dice Value Container -->
                                <Border CornerRadius="10"
                                            Padding="12"
                                            Margin="5 0 0 0"
                                            Background="BurlyWood"
                                            >
                                    <ItemsControl ItemsSource="{Binding DataContext.Dice,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Page}}}">
                                        <ItemsControl.ItemsPanel>
                                            <ItemsPanelTemplate>
                                                <WrapPanel/>
                                            </ItemsPanelTemplate>
                                        </ItemsControl.ItemsPanel>
                                        <ItemsControl.ItemTemplate>
                                            <DataTemplate>
                                                <Button x:Name="DiceValueButton"
                                                        Style="{StaticResource IconGrowButton}"
                                                        Content="{Binding}"
                                                        Command="{Binding DataContext.PieceCommand,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Page}}}">
                                                    <Button.CommandParameter>
                                                        <MultiBinding Converter="{StaticResource MultipleParameterConverter}">
                                                            <Binding ElementName="DiceValueButton"/>
                                                            <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type Button}}"/>
                                                        </MultiBinding>
                                                    </Button.CommandParameter>
                                                </Button>
                                            </DataTemplate>
                                        </ItemsControl.ItemTemplate>
                                    </ItemsControl>

                                </Border>

                                <!-- anchor -->
                                <Path Grid.Row="1" 
                                          Stroke="Black"
                                          Panel.ZIndex="1"
                                          Margin="20 -1 15 0"
                                          Data="M 0,0 L 20,20 L 40,0 L 0,0" 
                                          StrokeThickness="0"
                                          HorizontalAlignment="Center"
                                          Fill="BurlyWood"
                                          >

                                    <Path.Effect>
                                        <DropShadowEffect BlurRadius="3" Opacity="0.5" ShadowDepth="2" Color="LightGray" />
                                    </Path.Effect>

                                </Path>

                            </Grid>

                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="MouseEnter">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation To="1.2" Duration="0:0:0.15" Storyboard.TargetName="border" Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleX)" />
                                    <DoubleAnimation To="1.2" Duration="0:0:0.15" Storyboard.TargetName="border" Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleY)" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseLeave">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation To="1" Duration="0:0:0.15" Storyboard.TargetName="border" Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleX)" />
                                    <DoubleAnimation To="1" Duration="0:0:0.15" Storyboard.TargetName="border" Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleY)" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="popup" Property="IsOpen" Value="True"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="False">
                            <Setter TargetName="popup" Property="IsOpen" Value="False"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="border" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Yellow piece style-->
    <Style x:Key="YellowPieceButton" TargetType="{x:Type Button}">

        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FontSize" Value="15" />
        <Setter Property="Margin" Value="2" />
        <Setter Property="Width" Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid>
                        <Border x:Name="border"
                                    BorderBrush="White"
                                    BorderThickness="2"
                                    SnapsToDevicePixels="True"
                                    CornerRadius="{Binding Width,RelativeSource={RelativeSource AncestorType={x:Type Button}}}">
                            <Border.Background>
                                <RadialGradientBrush 
                                                         GradientOrigin="0.5,0.5" 
                                                         Center="0.5,0.5" RadiusX="0.5" RadiusY="0.5">
                                    <RadialGradientBrush.GradientStops>
                                        <GradientStop Color="Orange" Offset="0" />
                                        <GradientStop Color="#ffee00" Offset="1" />
                                    </RadialGradientBrush.GradientStops>
                                </RadialGradientBrush>
                            </Border.Background>

                            <!-- Add a render scale transform -->
                            <Border.RenderTransform>
                                <ScaleTransform />
                            </Border.RenderTransform>
                            <Border.RenderTransformOrigin>
                                <Point X="0.5" Y="0.5" />
                            </Border.RenderTransformOrigin>

                            <Label FontFamily="{StaticResource FontAwesomeSolid}"
                                       Content="&#xf005;"
                                       Foreground="White"
                                       HorizontalAlignment="Center"
                                       VerticalAlignment="Center"
                                       FontSize="20"/>

                        </Border>
                        <Popup x:Name="popup"
                                   Placement="Top"
                                   HorizontalOffset="10"
                                   VerticalOffset="20"
                                   AllowsTransparency="True"
                                   >
                            <Grid>

                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>

                                <!-- Dice Value Container -->
                                <Border CornerRadius="10"
                                            Padding="12"
                                            Margin="5 0 0 0"
                                            Background="BurlyWood"
                                            >
                                    <ItemsControl ItemsSource="{Binding DataContext.Dice,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Page}}}">
                                        <ItemsControl.ItemsPanel>
                                            <ItemsPanelTemplate>
                                                <WrapPanel/>
                                            </ItemsPanelTemplate>
                                        </ItemsControl.ItemsPanel>
                                        <ItemsControl.ItemTemplate>
                                            <DataTemplate>
                                                <Button x:Name="DiceValueButton"
                                                        Style="{StaticResource IconGrowButton}"
                                                        Content="{Binding}"
                                                        Command="{Binding DataContext.PieceCommand,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Page}}}">
                                                    <Button.CommandParameter>
                                                        <MultiBinding Converter="{StaticResource MultipleParameterConverter}">
                                                            <Binding ElementName="DiceValueButton"/>
                                                            <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type Button}}"/>
                                                        </MultiBinding>
                                                    </Button.CommandParameter>
                                                </Button>
                                            </DataTemplate>
                                        </ItemsControl.ItemTemplate>
                                    </ItemsControl>

                                </Border>

                                <!-- anchor -->
                                <Path Grid.Row="1" 
                                          Stroke="Black"
                                          Panel.ZIndex="1"
                                          Margin="20 -1 15 0"
                                          Data="M 0,0 L 20,20 L 40,0 L 0,0" 
                                          StrokeThickness="0"
                                          HorizontalAlignment="Center"
                                          Fill="BurlyWood"
                                          >

                                    <Path.Effect>
                                        <DropShadowEffect BlurRadius="3" Opacity="0.5" ShadowDepth="2" Color="LightGray" />
                                    </Path.Effect>

                                </Path>

                            </Grid>

                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="MouseEnter">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation To="1.2" Duration="0:0:0.15" Storyboard.TargetName="border" Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleX)" />
                                    <DoubleAnimation To="1.2" Duration="0:0:0.15" Storyboard.TargetName="border" Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleY)" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseLeave">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation To="1" Duration="0:0:0.15" Storyboard.TargetName="border" Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleX)" />
                                    <DoubleAnimation To="1" Duration="0:0:0.15" Storyboard.TargetName="border" Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleY)" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="popup" Property="IsOpen" Value="True"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="False">
                            <Setter TargetName="popup" Property="IsOpen" Value="False"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="border" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Red piece style-->
    <Style x:Key="DisablePieceButton" TargetType="{x:Type Button}">

        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FontSize" Value="15" />
        <Setter Property="Margin" Value="2" />
        <Setter Property="Width" Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid>
                        <Viewbox>
                            <Border x:Name="border"
                                    BorderBrush="White"
                                    BorderThickness="2"
                                    SnapsToDevicePixels="True"
                                    CornerRadius="{Binding Width,RelativeSource={RelativeSource AncestorType={x:Type Button}}}">
                                <Border.Background>
                                    <RadialGradientBrush 
                                                         GradientOrigin="0.5,0.5" 
                                                         Center="0.5,0.5" RadiusX="0.5" RadiusY="0.5">
                                        <RadialGradientBrush.GradientStops>
                                            <GradientStop Color="DarkGray" Offset="0" />
                                            <GradientStop Color="Black" Offset="1" />
                                        </RadialGradientBrush.GradientStops>
                                    </RadialGradientBrush>
                                </Border.Background>

                                <!-- Add a render scale transform -->
                                <Border.RenderTransform>
                                    <ScaleTransform />
                                </Border.RenderTransform>
                                <Border.RenderTransformOrigin>
                                    <Point X="0.5" Y="0.5" />
                                </Border.RenderTransformOrigin>

                                <Label FontFamily="{StaticResource FontAwesomeSolid}"
                                       Content="&#xf005;"
                                       Foreground="White"
                                       HorizontalAlignment="Center"
                                       VerticalAlignment="Center"
                                       FontSize="20"/>

                            </Border>
                        </Viewbox>
                       
                    </Grid>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="MouseEnter">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation To="1.2" Duration="0:0:0.15" Storyboard.TargetName="border" Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleX)" />
                                    <DoubleAnimation To="1.2" Duration="0:0:0.15" Storyboard.TargetName="border" Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleY)" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseLeave">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation To="1" Duration="0:0:0.15" Storyboard.TargetName="border" Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleX)" />
                                    <DoubleAnimation To="1" Duration="0:0:0.15" Storyboard.TargetName="border" Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleY)" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Dice Button Style-->
    <Style x:Key="DiceButton" TargetType="{x:Type Button}">

        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FontSize" Value="15" />
        <Setter Property="Margin" Value="2" />
        <Setter Property="Command" Value="{Binding DataContext.RollDiceCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Page}}}"/>
        <Setter Property="Width" Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border x:Name="border"
                                
                                Background="{TemplateBinding Background}" 
                                SnapsToDevicePixels="True"
                                CornerRadius="30">

                        <!-- Add a render scale transform -->
                        <Border.RenderTransform>
                            <ScaleTransform />
                        </Border.RenderTransform>
                        <Border.RenderTransformOrigin>
                            <Point X="0.5" Y="0.5" />
                        </Border.RenderTransformOrigin>
                        <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="MouseEnter">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation To="1.2" Duration="0:0:0.15" Storyboard.TargetName="border" Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleX)" />
                                    <DoubleAnimation To="1.2" Duration="0:0:0.15" Storyboard.TargetName="border" Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleY)" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseLeave">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation To="1" Duration="0:0:0.15" Storyboard.TargetName="border" Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleX)" />
                                    <DoubleAnimation To="1" Duration="0:0:0.15" Storyboard.TargetName="border" Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleY)" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="border" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>